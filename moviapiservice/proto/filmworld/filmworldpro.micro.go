// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/filmworld/filmworldpro.proto

/*
Package go_micro_srv_filmworldservice is a generated protocol buffer package.

It is generated from these files:
	proto/filmworld/filmworldpro.proto

It has these top-level messages:
	RequestAllMovies
	RequestMovie
	ResponseAllMovies
	ResponseMovie
	ResponseMovieStream
	MovieSimpleProto
	MovieProto
	ActorProto
	DirectorProto
	MovieTypeProto
	MovieLanguagesProto
	MovieGenresProto
*/
package go_micro_srv_filmworldservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FilmWorldService service

type FilmWorldService interface {
	GetAllMoviesSingleStream(ctx context.Context, in *RequestAllMovies, opts ...client.CallOption) (FilmWorldService_GetAllMoviesSingleStreamService, error)
	GetMovieByMovieId(ctx context.Context, in *RequestMovie, opts ...client.CallOption) (*ResponseMovie, error)
	GetAllMoviesStream(ctx context.Context, in *RequestAllMovies, opts ...client.CallOption) (FilmWorldService_GetAllMoviesStreamService, error)
}

type filmWorldService struct {
	c    client.Client
	name string
}

func NewFilmWorldService(name string, c client.Client) FilmWorldService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.filmworldservice"
	}
	return &filmWorldService{
		c:    c,
		name: name,
	}
}

func (c *filmWorldService) GetAllMoviesSingleStream(ctx context.Context, in *RequestAllMovies, opts ...client.CallOption) (FilmWorldService_GetAllMoviesSingleStreamService, error) {
	req := c.c.NewRequest(c.name, "FilmWorldService.GetAllMoviesSingleStream", &RequestAllMovies{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &filmWorldServiceGetAllMoviesSingleStream{stream}, nil
}

type FilmWorldService_GetAllMoviesSingleStreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ResponseAllMovies, error)
}

type filmWorldServiceGetAllMoviesSingleStream struct {
	stream client.Stream
}

func (x *filmWorldServiceGetAllMoviesSingleStream) Close() error {
	return x.stream.Close()
}

func (x *filmWorldServiceGetAllMoviesSingleStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *filmWorldServiceGetAllMoviesSingleStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *filmWorldServiceGetAllMoviesSingleStream) Recv() (*ResponseAllMovies, error) {
	m := new(ResponseAllMovies)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filmWorldService) GetMovieByMovieId(ctx context.Context, in *RequestMovie, opts ...client.CallOption) (*ResponseMovie, error) {
	req := c.c.NewRequest(c.name, "FilmWorldService.GetMovieByMovieId", in)
	out := new(ResponseMovie)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmWorldService) GetAllMoviesStream(ctx context.Context, in *RequestAllMovies, opts ...client.CallOption) (FilmWorldService_GetAllMoviesStreamService, error) {
	req := c.c.NewRequest(c.name, "FilmWorldService.GetAllMoviesStream", &RequestAllMovies{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &filmWorldServiceGetAllMoviesStream{stream}, nil
}

type FilmWorldService_GetAllMoviesStreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ResponseMovieStream, error)
}

type filmWorldServiceGetAllMoviesStream struct {
	stream client.Stream
}

func (x *filmWorldServiceGetAllMoviesStream) Close() error {
	return x.stream.Close()
}

func (x *filmWorldServiceGetAllMoviesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *filmWorldServiceGetAllMoviesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *filmWorldServiceGetAllMoviesStream) Recv() (*ResponseMovieStream, error) {
	m := new(ResponseMovieStream)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FilmWorldService service

type FilmWorldServiceHandler interface {
	GetAllMoviesSingleStream(context.Context, *RequestAllMovies, FilmWorldService_GetAllMoviesSingleStreamStream) error
	GetMovieByMovieId(context.Context, *RequestMovie, *ResponseMovie) error
	GetAllMoviesStream(context.Context, *RequestAllMovies, FilmWorldService_GetAllMoviesStreamStream) error
}

func RegisterFilmWorldServiceHandler(s server.Server, hdlr FilmWorldServiceHandler, opts ...server.HandlerOption) {
	type filmWorldService interface {
		GetAllMoviesSingleStream(ctx context.Context, stream server.Stream) error
		GetMovieByMovieId(ctx context.Context, in *RequestMovie, out *ResponseMovie) error
		GetAllMoviesStream(ctx context.Context, stream server.Stream) error
	}
	type FilmWorldService struct {
		filmWorldService
	}
	h := &filmWorldServiceHandler{hdlr}
	s.Handle(s.NewHandler(&FilmWorldService{h}, opts...))
}

type filmWorldServiceHandler struct {
	FilmWorldServiceHandler
}

func (h *filmWorldServiceHandler) GetAllMoviesSingleStream(ctx context.Context, stream server.Stream) error {
	m := new(RequestAllMovies)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.FilmWorldServiceHandler.GetAllMoviesSingleStream(ctx, m, &filmWorldServiceGetAllMoviesSingleStreamStream{stream})
}

type FilmWorldService_GetAllMoviesSingleStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ResponseAllMovies) error
}

type filmWorldServiceGetAllMoviesSingleStreamStream struct {
	stream server.Stream
}

func (x *filmWorldServiceGetAllMoviesSingleStreamStream) Close() error {
	return x.stream.Close()
}

func (x *filmWorldServiceGetAllMoviesSingleStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *filmWorldServiceGetAllMoviesSingleStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *filmWorldServiceGetAllMoviesSingleStreamStream) Send(m *ResponseAllMovies) error {
	return x.stream.Send(m)
}

func (h *filmWorldServiceHandler) GetMovieByMovieId(ctx context.Context, in *RequestMovie, out *ResponseMovie) error {
	return h.FilmWorldServiceHandler.GetMovieByMovieId(ctx, in, out)
}

func (h *filmWorldServiceHandler) GetAllMoviesStream(ctx context.Context, stream server.Stream) error {
	m := new(RequestAllMovies)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.FilmWorldServiceHandler.GetAllMoviesStream(ctx, m, &filmWorldServiceGetAllMoviesStreamStream{stream})
}

type FilmWorldService_GetAllMoviesStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ResponseMovieStream) error
}

type filmWorldServiceGetAllMoviesStreamStream struct {
	stream server.Stream
}

func (x *filmWorldServiceGetAllMoviesStreamStream) Close() error {
	return x.stream.Close()
}

func (x *filmWorldServiceGetAllMoviesStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *filmWorldServiceGetAllMoviesStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *filmWorldServiceGetAllMoviesStreamStream) Send(m *ResponseMovieStream) error {
	return x.stream.Send(m)
}
